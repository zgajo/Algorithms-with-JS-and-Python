// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BTreeData } from '../map-data/b-tree-data';
import { GTree } from '../map-data/g-tree';


export class MapTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):MapTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMapTable(bb:flatbuffers.ByteBuffer, obj?:MapTable):MapTable {
  return (obj || new MapTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMapTable(bb:flatbuffers.ByteBuffer, obj?:MapTable):MapTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MapTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

wayNodesGeotree(obj?:GTree):GTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new GTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dataNodesGeotree(obj?:GTree):GTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new GTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

btree(obj?:BTreeData):BTreeData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new BTreeData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startMapTable(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addWayNodesGeotree(builder:flatbuffers.Builder, wayNodesGeotreeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, wayNodesGeotreeOffset, 0);
}

static addDataNodesGeotree(builder:flatbuffers.Builder, dataNodesGeotreeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataNodesGeotreeOffset, 0);
}

static addBtree(builder:flatbuffers.Builder, btreeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, btreeOffset, 0);
}

static endMapTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMapTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMapTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
