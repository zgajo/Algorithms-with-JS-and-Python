// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BNodesTree } from '../../map/node/b-nodes-tree';


export class Data {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Data {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsData(bb:flatbuffers.ByteBuffer, obj?:Data):Data {
  return (obj || new Data()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsData(bb:flatbuffers.ByteBuffer, obj?:Data):Data {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Data()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nodes(obj?:BNodesTree):BNodesTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BNodesTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

poi(obj?:BNodesTree):BNodesTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new BNodesTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nodesOffset, 0);
}

static addPoi(builder:flatbuffers.Builder, poiOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, poiOffset, 0);
}

static endData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
