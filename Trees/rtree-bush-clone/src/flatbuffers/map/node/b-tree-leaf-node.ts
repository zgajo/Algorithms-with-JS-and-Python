// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class BTreeLeafNode {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):BTreeLeafNode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBTreeLeafNode(bb:flatbuffers.ByteBuffer, obj?:BTreeLeafNode):BTreeLeafNode {
  return (obj || new BTreeLeafNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBTreeLeafNode(bb:flatbuffers.ByteBuffer, obj?:BTreeLeafNode):BTreeLeafNode {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BTreeLeafNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lat():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

lon():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

partOfWays(index: number):string
partOfWays(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
partOfWays(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

partOfWaysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pointsTo(index: number):string
pointsTo(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
pointsTo(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

pointsToLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

distance(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

distanceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

distanceArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startBTreeLeafNode(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addLat(builder:flatbuffers.Builder, lat:number) {
  builder.addFieldFloat64(1, lat, 0.0);
}

static addLon(builder:flatbuffers.Builder, lon:number) {
  builder.addFieldFloat64(2, lon, 0.0);
}

static addPartOfWays(builder:flatbuffers.Builder, partOfWaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, partOfWaysOffset, 0);
}

static createPartOfWaysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPartOfWaysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPointsTo(builder:flatbuffers.Builder, pointsToOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, pointsToOffset, 0);
}

static createPointsToVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPointsToVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDistance(builder:flatbuffers.Builder, distanceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, distanceOffset, 0);
}

static createDistanceVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDistanceVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDistanceVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startDistanceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endBTreeLeafNode(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBTreeLeafNode(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, lat:number, lon:number, partOfWaysOffset:flatbuffers.Offset, pointsToOffset:flatbuffers.Offset, distanceOffset:flatbuffers.Offset):flatbuffers.Offset {
  BTreeLeafNode.startBTreeLeafNode(builder);
  BTreeLeafNode.addId(builder, idOffset);
  BTreeLeafNode.addLat(builder, lat);
  BTreeLeafNode.addLon(builder, lon);
  BTreeLeafNode.addPartOfWays(builder, partOfWaysOffset);
  BTreeLeafNode.addPointsTo(builder, pointsToOffset);
  BTreeLeafNode.addDistance(builder, distanceOffset);
  return BTreeLeafNode.endBTreeLeafNode(builder);
}
}
