// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BNodesTree } from '../geo-table/b-nodes-tree';
import { GTree } from '../geo-table/g-tree';


export class NodesTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):NodesTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNodesTable(bb:flatbuffers.ByteBuffer, obj?:NodesTable):NodesTable {
  return (obj || new NodesTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNodesTable(bb:flatbuffers.ByteBuffer, obj?:NodesTable):NodesTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NodesTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

placeNodes(obj?:GTree):GTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new GTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

poiNodes(obj?:GTree):GTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new GTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

indexPlaces(obj?:BNodesTree):BNodesTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new BNodesTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

indexPois(obj?:BNodesTree):BNodesTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new BNodesTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startNodesTable(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPlaceNodes(builder:flatbuffers.Builder, placeNodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, placeNodesOffset, 0);
}

static addPoiNodes(builder:flatbuffers.Builder, poiNodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, poiNodesOffset, 0);
}

static addIndexPlaces(builder:flatbuffers.Builder, indexPlacesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, indexPlacesOffset, 0);
}

static addIndexPois(builder:flatbuffers.Builder, indexPoisOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, indexPoisOffset, 0);
}

static endNodesTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishNodesTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedNodesTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
